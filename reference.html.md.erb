---
title: Service Plan Reference
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic provides reference information about the plans and configuration parameters used for
configuring service instances.

See the section below for the service that you want:

- [Amazon S3 Bucket](#aws-bucket)
- [Amazon RDS for MySQL](#aws-mysql)
- [Amazon RDS for PostgreSQL](#aws-postgres)
- [Amazon ElastiCache for Redis](#aws-redis)
- [Amazon DynamoDB](#aws-dynamodb)

## <a id="aws-bucket"></a> Amazon S3 Bucket

This section applies to the `csb-aws-s3-bucket` service.
This section lists default plans and configuration options for Amazon S3 Buckets on AWS.

You can provision a service by running:

```
cf create-service csb-aws-s3-bucket PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

You can update the configuration parameters for a service instance by running:

```
cf update-service SERVICE-INSTANCE -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

### <a id="aws-bucket-plans"></a> Amazon S3 Bucket Plans

The table below lists the plans for the `csb-aws-s3-bucket` service:

| Plan       | Description |
|------------|------|
| private       | Private S3 bucket|
| public-read      | Publicly readable S3 bucket|

### <a id="aws-bucket-plans-config"></a> Amazon S3 Bucket Plan Configuration Parameters

The table below lists the parameters that you can configure in <%= vars.ops_manager %>.
You can also configure these parameters using the `-c` flag when provisioning a `csb-aws-s3-bucket` service:

<table class="nice">
  <thead>
    <tr>
    <th width="25%">Parameter Name</th>
    <th width="10%">Type</th>
    <th width="45%">Description</th>
    <th width="20%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>bucket_name</code></td>
      <td>string</td>
      <td>The name of bucket to create.</td>
      <td><code>csb-INSTANCE-ID</code></td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>string</td>
      <td>
        The AWS region to deploy the service in.
        For more information about available regions, see the
        <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.</td>
      <td><code>us-west-2</code></td>
    </tr>
    <tr>
      <td><code>aws_access_key_id</code></td>
      <td>string</td>
      <td>The AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>aws_secret_access_key</code></td>
      <td>string</td>
      <td>The corresponding secret for the AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Secret Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
  </tbody>
</table>

### <a id="aws-bucket-binding"></a> Amazon S3 Bucket Binding Credentials

The format for binding credentials for Amazon S3 Bucket is as follows:

```
{
    "arn" : "BUCKET-ARN",
    "bucket_domain_name" : "BUCKET-FQDN",
    "region" : "BUCKET-REGION",
    "bucket_name" : "BUCKET-NAME",
    "access_key_id" : "ACCESS-KEY-FOR-BUCKET",
    "secret_access_key" : "SECRET-KEY-FOR-BUCKET"
}
```


## <a id="aws-mysql"></a> Amazon RDS for MySQL

This section applies to the `aws-rds-mysql` service.
This section lists default plans and configuration options for Amazon RDS for MySQL on AWS.

You can provision a service by running:

```
cf create-service aws-rds-mysql PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

You can update the configuration parameters for a service instance by running:

```
cf update-service SERVICE-INSTANCE -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

### <a id="aws-mysql-plans"></a> Amazon RDS for MySQL Plans

The default plans and configuration options for Amazon RDS for MySQL are in the table below:

| Plan | Instance Class | Version | CPUs | Memory Size | Disk Size |
|------|---------|---------|------|-------------|-----------|
|small | db.t2.medium | 5.7     | 2    | minimum 4&nbsp;GB     | 5&nbsp;GB       |
|medium| db.m4.xlarge | 5.7      | 4    | minimum 8&nbsp;GB     | 10&nbsp;GB      |
|large | db.m4.2xlarge | 5.7      | 8    | minimum 16&nbsp;GB    | 20&nbsp;GB      |

#### Amazon RDS for MySQL Core to Instance Class Mapping

The table below shows the CPU size mapped to AWS database instance types:

| CPUs | Instance class |
|-------|---------------|
| 1     | db.m1.medium  |
| 2     | db.t2.medium  |
| 4     | db.m4.xlarge  |
| 8     | db.m4.2xlarge |
| 16    | db.m4.4xlarge |
| 32    | db.m5.8xlarge |
| 64    | db.m5.16xlarge|

For more information about database instance classes, see the
[AWS documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html).

### <a id="aws-mysql-plans-config"></a> Amazon RDS for MySQL Plan Configuration Parameters

The table below lists the parameters that you can configure in <%= vars.ops_manager %>.
You can also configure these parameters using the `-c` flag when provisioning a `aws-rds-mysql` service:

<table class="nice">
  <thead>
    <tr>
    <th width="25%">Parameter Name</th>
    <th width="10%">Type</th>
    <th width="45%">Description</th>
    <th width="20%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>instance_name</code></td>
      <td>string</td>
      <td>The name of the AWS instance to create.</td>
      <td><code>csb-mysql-INSTANCE-ID</code></td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>string</td>
      <td>
        The AWS region to deploy the service in.
        For more information about available regions, see the
        <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.
      </td>
      <td><code>us-west-2</code></td>
    </tr>
    <tr>
      <td><code>aws_vpc_id</code></td>
      <td>string</td>
      <td>The Virtual Private Cloud (VPC) to connect the instance to.</td>
      <td>The default VPC</td>
    </tr>
    <tr>
      <td><code>aws_access_key_id</code></td>
      <td>string</td>
      <td>The AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>aws_secret_access_key</code></td>
      <td>string</td>
      <td>The corresponding secret for the AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Secret Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>instance_class</code></td>
      <td>string</td>
      <td>Specifying the instance class overrides the conversion of cores to instance classes that is
        described in the <em>Core to Instance Class Mapping</em> table in the
        <a href="#aws-mysql-plans">Plans for MySQL</a> section above.<br><br>
        For more information about database instance classes, see the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">AWS documentation</a>.
      </td>
      <td>n/a</td>
    </tr>
    <tr>
      <td><code>multi-az</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, create a Multi-AZ (HA) instance.
        For more information about Multi-AZ deployment, see the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html">AWS documentation</a>.
      </td>
      <td>
        <code>false</code>
      </td>
    </tr>
    <tr>
      <td><code>publicly_accessible</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, make instance available to public connections.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>allow_major_version_upgrade</code></td>
      <td>boolean</td>
      <td>Indicates that major version upgrades are allowed.
        Changing this parameter does not result in an outage and the change is
        asynchronously applied as soon as possible.</td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td><code>auto_minor_version_upgrade</code></td>
      <td>boolean</td>
      <td>(Optional) Indicates that minor engine upgrades will be applied automatically
        to the database instance during the maintenance window.</td>
      <td><code>true</code></td>
    </tr>
       <tr>
      <td><code>maintenance_day</code>,<code>maintenance_start_hour</code>,<code>maintenance_start_min</code>,<code>maintenance_end_hour</code>, <code>maintenance_end_min</code></td>
      <td>boolean</td>
      <td>(Optional) Maintenance window definition.</td>
      <td>Defaults vary by region. See the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow">AWS Documentation</a>.</td>
    </tr>
    <tr>
      <td><code>storage_encrypted</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, database storage is encrypted.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>parameter_group_name</code></td>
      <td>string</td>
      <td>The MySQL parameter group name for the service instance.</td>
      <td><code>default.mysql.MYSQL-VERSION</code></td>
    </tr>
    <tr>
      <td><code>rds_subnet_group</code></td>
      <td>string</td>
       <td>The name of subnet to attach the database instance to.
         This overrides <code>aws_vpc_id</code.></td>
      <td>None</td>
    </tr>
    <tr>
      <td><code>rds_vpc_security_group_ids</code></td>
      <td>comma separated string</td>
      <td>Security group IDs to assign to the database instance.</td>
      <td>None</td>
    </tr>
    <tr>
      <td><code>use_tls</code></td>
      <td>boolean</td>
      <td>Use TLS for database connections.</td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td><code>storage_autoscale</code></td>
      <td>boolean</td>
      <td>Enable storage autoscaling up to storage_autoscale_limit_gb.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>storage_autoscale_limit_gb</code></td>
      <td>number</td>
      <td>Max storage size if storage_autoscale is enabled.</td>
      <td><code>0</code></td>
    </tr>
    <tr>
      <td><code>db_name</code></td>
      <td>string</td>
      <td>The name of the database.</td>
      <td><code>vsbdb</code></td>
    </tr>
  </tbody>
</table>

### <a id="aws-mysql-binding"></a> Amazon RDS for MySQL Binding Credentials

The format for binding credentials for MySQL is as follows:

```json
{
    "name" : "DATABASE-NAME",
    "hostname" : "DATABASE-SERVER-HOST",
    "port" : "DATABASE-SERVER-PORT",
    "username" : "AUTHENTICATION-USERNAME",
    "password" : "AUTHENTICATION-PASSWORD",
    "uri" : "DATABASE-CONNECTION-URI",
    "jdbcUrl" : "JDBC-FORMAT-CONNECTION-URI"
}
```


## <a id="aws-postgres"></a> Amazon RDS for PostgreSQL

This section applies to the `aws-rds-postgres` service.
This section lists default plans and configuration options for Amazon RDS for PostgreSQL on AWS.

You can provision a service by running:

```
cf create-service aws-rds-postgres PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

You can update the configuration parameters for a service instance by running:

```
cf update-service SERVICE-INSTANCE -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

### <a id="aws-postgres-plans"></a> Amazon RDS for PostgreSQL Plan

The default plans and configuration options for Amazon RDS for PostgreSQL are in the table below:

| Plan | Instance Class | Version | CPUs | Memory Size | Disk Size |
|------|---------|---------|------|-------------|-----------|
|small | db.t2.medium | 11      | 2    | minimum 4&nbsp;GB     | 5&nbsp;GB       |
|medium| db.m4.xlarge | 11      | 4    | minimum 8&nbsp;GB     | 10&nbsp;GB      |
|large | db.m4.2xlarge | 11      | 8    | minimum 16&nbsp;GB    | 20&nbsp;GB      |

#### Amazon RDS for PostgreSQL Core to Instance Class Mapping

The table below shows the CPU size mapped to AWS database instance types:

| CPUs | Instance Class |
|-------|---------------|
| 1     | db.m1.medium  |
| 2     | db.t2.medium  |
| 4     | db.m4.xlarge  |
| 8     | db.m4.2xlarge |
| 16    | db.m4.4xlarge |
| 32    | db.m5.8xlarge |
| 64    | db.m5.16xlarge|

For more information about database instance classes, see the
[AWS documentation](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html).

### <a id="aws-postgres-plans-config"></a> Amazon RDS for PostgreSQL Plan Configuration Parameters

The table below lists the parameters that you can configure in <%= vars.ops_manager %>.
You can also configure these parameters using the `-c` flag when provisioning a `aws-rds-postgres` service:

<table class="nice">
  <thead>
    <tr>
    <th width="25%">Parameter Name</th>
    <th width="10%">Type</th>
    <th width="45%">Description</th>
    <th width="20%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>instance_name</code></td>
      <td>string</td>
      <td>The name of the AWS instance to create.</td>
      <td><code>csb-mysql-INSTANCE-ID</code></td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>string</td>
      <td>
        The AWS region in which to deploy the service. For more information about available regions,
        see the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.
      </td>
      <td><code>us-west-2</code></td>
    </tr>
    <tr>
      <td><code>vpc_id</code></td>
      <td>string</td>
      <td>The Virtual Private Cloud (VPC) to connect the instance to.</td>
      <td>The default VPC</td>
    </tr>
    <tr>
      <td><code>aws_access_key_id</code></td>
      <td>string</td>
      <td>The AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>aws_secret_access_key</code></td>
      <td>string</td>
      <td>The corresponding secret for the AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Secret Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>instance_class</code></td>
      <td>string</td>
      <td>Specifying the instance class overrides the conversion of cores to instance classes that is
        described in the <em>Core to Instance Class Mapping</em> table in the
        <a href="#aws-postgres-plans">Plans for PostgreSQL</a> section above.<br><br>
        For more information about database instance classes, see the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">AWS documentation</a>.</td>
      <td>n/a</td>
    </tr>
    <tr>
      <td><code>multi-az</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, create a Multi-AZ (HA) instance.
      For more information about Multi-AZ deployments, see the
      <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html">AWS documentation</a>.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>publicly_accessible</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, make instance available to public connections.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>allow_major_version_upgrade</code></td>
      <td>boolean</td>
      <td>Indicates that major version upgrades are allowed.
        Changing this parameter does not result in an outage and the change is
        asynchronously applied as soon as possible.</td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td><code>allow_minor_version_upgrade</code></td>
      <td>boolean</td>
      <td>(Optional) Indicates that minor engine upgrades will be applied automatically
        to the database instance during the maintenance window.</td>
      <td><code>true</code></td>
    </tr>
    <tr>
      <td><code>maintenance_day</code>,<code>maintenance_start_hour</code>,<code>maintenance_start_min</code>,<code>maintenance_end_hour</code>, <code>maintenance_end_min</code></td>
      <td>boolean</td>
      <td>(Optional) Maintenance window definition.</td>
      <td>Defaults vary by region. See the
        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow">AWS Documentation</a>.</td>
    </tr>
    <tr>
      <td><code>storage_encrypted</code></td>
      <td>boolean</td>
      <td>If <code>true</code>, database storage is encrypted.</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>parameter_group_name</code></td>
      <td>string</td>
      <td>The PostgreSQL parameter group name for the service instance.</td>
      <td><code>default.postgres.POSTGRES-VERSION</code></td>
    </tr>
    <tr>
      <td><code>rds_subnet_group</code></td>
      <td>string</td>
       <td>The name of subnet to attach the database instance to.
         This overrides <code>aws_vpc_id</code.></td>
      <td>None</td>
    </tr>
    <tr>
      <td><code>rds_vpc_security_group_ids</code></td>
      <td>comma separated string</td>
      <td>Security group IDs to assign to the database instance.</td>
      <td>None</td>
    </tr>
    <tr>
      <td><code>use_tls</code></td>
      <td>boolean</td>
      <td>Use TLS for database connections.</td>
      <td>true</td>
    </tr>
  </tbody>
</table>

### <a id="aws-postgres-binding"></a> Amazon RDS for PostgreSQL Binding Credentials

The format for binding credentials for PostgreSQL is as follows:

```json
{
    "name" : "DATABASE-NAME",
    "hostname" : "DATABASE-SERVER-HOST",
    "port" : "DATABASE-SERVER-PORT",
    "username" : "AUTHENTICATION-USERNAME",
    "password" : "AUTHENTICATION-PASSWORD",
    "uri" : "DATABASE-CONNECTION-URI",
    "jdbcUrl" : "JDBC-FORMAT-CONNECTION-URI"
}
```


## <a id="aws-redis"></a> Amazon ElastiCache for Redis

This section applies to the `csb-aws-redis` service.
This section lists default plans and configuration options for Amazon ElastiCache for Redis.

You can provision a service by running:

```
cf create-service csb-aws-redis PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

You can update the configuration parameters for a service instance by running:

```
cf update-service SERVICE-INSTANCE -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```

### <a id="aws-redis-plans"></a> Amazon ElastiCache for Redis Plans

Tables for cache sizes and plans are below:

#### Cache Size to AWS Node Type Mapping

| cache_size | node type |
|------------|-----------|
| 1   |cache.t2.small |
| 2   |cache.t3.medium |
| 4   |cache.m5.large |
| 8   |cache.m5.xlarge |
| 16  |cache.r4.xlarge |
| 32  |cache.r4.2xlarge |
| 64  |cache.r4.4xlarge |
| 128 |cache.r4.8xlarge |
| 256 |cache.r5.12xlarge |

#### Basic Plans

| Plan | Cache Size | AWS Cache Node Type | HA |
|------|------------|---------------------|-----|
| small | minimum 1&nbsp;GB | cache.t2.small | no |
| medium | minimum 4&nbsp;GB |cache.m5.large | no |
| large | minimum 16&nbsp;GB |cache.r4.xlarge | no |

#### High Availability Plans

| Plan | Cache Size | AWS Cache Node Type | HA |
|------|------------|---------------------|-----|
| small-ha | minimum 1&nbsp;GB | cache.t2.small | yes |
| medium-ha | minimum 4&nbsp;GB |cache.m5.large | yes |
| large-ha | minimum 16&nbsp;GB |cache.r4.xlarge | yes |

### <a id="aws-redis-plans-config"></a> Amazon ElastiCache for Redis Plan Configuration Parameters

The table below lists the parameters that you can configure in <%= vars.ops_manager %>.
You can also configure these parameters using the `-c` flag when provisioning a `csb-aws-redis` service:

<table class="nice">
  <thead>
    <tr>
    <th width="25%">Parameter Name</th>
    <th width="10%">Type</th>
    <th width="45%">Description</th>
    <th width="20%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>instance_name</code></td>
      <td>string</td>
      <td>The name of the AWS instance to create.</td>
      <td><code>csb-redis-INSTANCE-ID</code></td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>string</td>
      <td>
        The AWS region to deploy the service in.
        For more information about available regions, see the
        <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.
      </td>
      <td><code>us-west-2</code></td>
    </tr>
    <tr>
      <td><code>vpc_id</code></td>
      <td>string</td>
      <td>The Virtual Private Cloud (VPC) to connect the instance to.</td>
      <td>The default VPC</td>
    </tr>
    <tr>
      <td><code>aws_access_key_id</code></td>
      <td>string</td>
      <td>The AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>aws_secret_access_key</code></td>
      <td>string</td>
      <td>The corresponding secret for the AWS Access Key to use for an instance.</td>
      <td>The value the operator entered for <strong>AWS Secret Access Key</strong> in <%= vars.ops_manager %>.</td>
    </tr>
    <tr>
      <td><code>redis_version</code></td>
      <td>string</td>
      <td>Redis version to provision: <code>&quot;2.6&quot;</code>,
        <code>&quot;2.8&quot;</code>,
        <code>&quot;3.2&quot;</code>,
        <code>&quot;4.0&quot;</code>,
        <code>&quot;5.0&quot;</code></td>
      <td><code>&quot;5.0&quot;</code></td>
    </tr>
    <tr>
      <td><code>cache_size</code></td>
      <td>integer</td>
      <td>The size in GB for the cache: 1, 2, 4, 8, 16, 32, 64, 128, 256</td>
      <td>The default for the plan you selected.</td>
    </tr>
    <tr>
      <td><code>node_type</code></td>
      <td>string</td>
      <td>Specifying the node type overrides the `cache-size` conversion to node type that is
        described in the <strong>Cache Size to AWS Node Type Mapping</strong> table in the
        <a href="#aws-redis-plans">Plans for Amazon ElastiCache</a> section above.<br><br>
        For more information about node types and pricing, see the
        <a href="https://aws.amazon.com/elasticache/pricing/">AWS documentation</a>.</td>
      <td>n/a</td>
    </tr>
  </tbody>
</table>


### <a id="aws-redis-binding"></a> Amazon ElastiCache for Redis Binding Credentials

The format for binding credentials for Redis is as follows:

```json
{
    "host" : "REDIS-SERVER-HOSTNAME",
    "port" : "REDIS-SERVER-PORT",
    "password" : "AUTHENTICATION-PASSWORD",
    "tls_port" : "REDIS-TLS-PORT"
}
```


## <a id="aws-dynamodb"></a> Amazon DynamoDB

This section applies to the `csb-aws-dynamodb` service.
This section lists default plans and configuration options for Amazon DynamoDB.

You can provision an Amazon DynamoDB table by running:

```console
cf create-service csb-aws-dynamodb PLAN-NAME SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}
```

For example:

```console
cf create-service csb-aws-dynamodb ondemand my-service -c '
{
  "attributes": [
    {"name":"id","type":"S"},
    {"name":"key","type":"S"},
    {"name":"value","type":"S"}
  ],
  "global_secondary_indexes": [
    {
      "hash_key": "key",
      "name": "KeyIndex",
      "non_key_attributes": ["id"],
      "projection_type": "INCLUDE",
      "range_key": "value"
    }
  ],
  "hash_key": "id",
  "range_key": "value",
  "table_name": "csb-dynamodb-test"
}'
```

You can update the configuration parameters for a service instance by running:

```console
cf update-service SERVICE-INSTANCE-NAME -c '{"PARAMETER-NAME": "PARAMETER-VALUE"}'
```


### <a id="aws-dynamodb-plans"></a> Amazon DynamoDB Plans

The default plans for Amazon DynamoDB are in the table below:

| Plan | Billing Mode |
|------|--------------|
| ondemand | With on-demand capacity mode, DynamoDB is charged for the data reads and writes the application performs on the table. |
| provisioned | With provisioned capacity mode, specify the number of reads and writes per second that the application is expected to require. |

### <a id="aws-redis-plans-config"></a> Amazon DynamoDB Plan Configuration Parameters

The table below lists the parameters that you can configure in <%= vars.ops_manager %>.
You can also configure these parameters using the `-c` flag when provisioning a `csb-aws-dynamodb`
service:

<table class="nice">
  <thead>
    <tr>
    <th width="25%">Parameter Name</th>
    <th width="10%">Type</th>
    <th width="5%">Required</th>
    <th width="45%">Description</th>
    <th width="15%">Default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code>table_name</code></td>
      <td>string</td>
      <td>yes</td>
      <td>The name of the table</td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>hash_key</code></td>
      <td>string</td>
      <td>yes</td>
      <td>The key to use as the hash key</td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>range_key</code></td>
      <td>string</td>
      <td>yes</td>
      <td>The key to use as the range key</td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>attributes</code></td>
      <td>array</td>
      <td>yes</td>
      <td>A list of attributes and their types, for example: <code>[{"name":"id", "type":"S"}, {"name":"value", "type":"S"}]</code></td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>global_secondary_indexes</code></td>
      <td>array</td>
      <td>yes</td>
      <td>A list of global secondary indexes, for example: <code>[{"name":"KeyIndex", "hash_key":"key", "range_key":"value", "projection_type":"INCLUDE", "non_key_attributes":["id"]}]</code></td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>local_secondary_indexes</code></td>
      <td>array</td>
      <td>no</td>
      <td>A list of local secondary indexes, for example: <code>[{"name":"KeyIndex", "hash_key":"key", "range_key":"value", "projection_type":"INCLUDE", "non_key_attributes":["id"]}]</code></td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>instance_name</code></td>
      <td>string</td>
      <td>no</td>
      <td>The name of the AWS instance to create</td>
      <td><code>csb-dynamodb-INSTANCE-ID</code></td>
    </tr>
    <tr>
      <td><code>region</code></td>
      <td>string</td>
      <td>no</td>
      <td>
        This is the AWS region to deploy the service in.
        For more information about available regions, see the
        <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions">AWS documentation</a>.
      </td>
      <td><code>us-west-2</code></td>
    </tr>
    <tr>
      <td><code>ttl_enabled</code></td>
      <td>boolean</td>
      <td>no</td>
      <td>Whether TTL is enabled</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>ttl_attribute_name</code></td>
      <td>string</td>
      <td>no</td>
      <td>The name of the table attribute to store the TTL timestamp in</td>
      <td><code>""</code></td>
    </tr>
    <tr>
      <td><code>stream_enabled</code></td>
      <td>boolean</td>
      <td>no</td>
      <td>Indicates whether Streams are to be enabled</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>stream_view_type</code></td>
      <td>string</td>
      <td>no</td>
      <td>Valid values are <code>KEYS_ONLY</code>, <code>NEW_IMAGE</code>, <code>OLD_IMAGE</code>, <code>NEW_AND_OLD_IMAGES</code></td>
      <td><code>null</code></td>
    </tr>
    <tr>
      <td><code>server_side_encryption_enabled</code></td>
      <td>boolean</td>
      <td>no</td>
      <td>Whether or not to enable encryption at rest using an AWS-managed KMS customer master key (CMK).</td>
      <td><code>false</code></td>
    </tr>
    <tr>
      <td><code>server_side_encryption_kms_key_arn</code></td>
      <td>string</td>
      <td>no</td>
      <td>The ARN of the CMK that should be used for the AWS KMS encryption. This attribute should only be specified if the key is different from the default DynamoDB CMK, alias/aws/dynamodb.</td>
      <td><code>null</code></td>
    </tr>
    <tr>
      <td><code>write_capacity</code></td>
      <td>number</td>
      <td>no</td>
      <td>The number of write units for this table. If <code>billing_mode</code> is <code>PROVISIONED</code>, this field should be greater than 0.</td>
      <td><em>n/a</em></td>
    </tr>
    <tr>
      <td><code>read_capacity</code></td>
      <td>number</td>
      <td>no</td>
      <td>The number of read units for this table. If <code>billing_mode</code> is <code>PROVISIONED</code>, this field should be greater than 0.</td>
      <td><em>n/a</em></td>
    </tr>
  </tbody>
</table>


### <a id="aws-dynamodb-binding"></a> Amazon DynamoDB Binding Credentials

The format for binding credentials for DynamoDB is as follows:

```json
{
    "access_key_id" : "AWS-ACCESS-KEY-ID",
    "secret_access_key" : "AWS-SECRET-ACCESS-KEY",
    "region" : "AWS-REGION",
    "dynamodb_table_name": "DYNAMODB-TABLE-NAME",
    "dynamodb_table_arn" : "DYNAMODB-TABLE-ARN",
    "dynamodb_table_id" : "DYNAMODB-TABLE-ID"
}
```
